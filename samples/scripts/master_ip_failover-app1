#!/usr/bin/env perl

#  Copyright (C) 2011 DeNA Co.,Ltd.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#  Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

## Note: This is a sample script and is not complete. Modify the script based on your environment.

use strict;
use warnings FATAL => 'all';

use Getopt::Long;
use MHA::DBHelper;

my (
  $command,        $ssh_user,         $orig_master_host,
  $orig_master_ip, $orig_master_port, $new_master_host,
  $new_master_ip,  $new_master_port,  $new_master_user,
  $new_master_password
);

### TODO
$command                = 'ERROR_NOT_SET';
$ssh_user               = 'ERROR_NOT_SET';
$orig_master_host       = 'ERROR_NOT_SET';
$orig_master_ip         = 'ERROR_NOT_SET';
$orig_master_port       = 'ERROR_NOT_SET';
$new_master_host        = 'ERROR_NOT_SET';
$new_master_ip          = 'ERROR_NOT_SET';
$new_master_port        = 'ERROR_NOT_SET';
$new_master_user        = 'ERROR_NOT_SET';
$new_master_password    = 'ERROR_NOT_SET';

### TODO
my $vip                 = '192.168.1.165'; # Virtual IP
my $netmask             = '24';
my $gateway             = '192.168.1.1';   # Gateway IP
my $interface           = 'ens160';
my $key                 = "11";
my $ssh_start_vip       = "/sbin/ip address add  $vip/$netmask dev $interface:$key; /sbin/arping -I $interface -c 3 -s $vip $gateway >/dev/null 2>&1";
my $ssh_stop_vip        = "/sbin/ip address del  $vip/$netmask dev $interface:$key";
my $ssh_status_vip      = "/sbin/ip address show $interface";

### TODO
# A simple system call that enable the VIP on the new master
sub start_vip() {
  my $cmd = "ssh $ssh_user\@$new_master_host \" $ssh_start_vip \"";
  print "==== RUN: $cmd ====\n";
  `$cmd`;
  return $?;
}
# A simple system call that disable the VIP on the old_master
sub stop_vip() {
  my $cmd = "ssh $ssh_user\@$orig_master_host \" $ssh_stop_vip \"";
  print "==== RUN: $cmd ====\n";
  `$cmd`;
  return $?;
}
# A simple system call that show the VIP on the current master
sub status_vip() {
  my $cmd = "ssh -o ConnectTimeout=5 $ssh_user\@$vip \" $ssh_status_vip \"";
  print "==== RUN: $cmd ====\n";
  print `$cmd`;
  return $?;
}


GetOptions(
  'command=s'             => \$command,
  'ssh_user=s'            => \$ssh_user,
  'orig_master_host=s'    => \$orig_master_host,
  'orig_master_ip=s'      => \$orig_master_ip,
  'orig_master_port=i'    => \$orig_master_port,
  'new_master_host=s'     => \$new_master_host,
  'new_master_ip=s'       => \$new_master_ip,
  'new_master_port=i'     => \$new_master_port,
  'new_master_user=s'     => \$new_master_user,
  'new_master_password=s' => \$new_master_password,
);


### TODO
sub show_params() {
  print "==== $0 Show Parameters ====
    command             => $command,
    ssh_user            => $ssh_user,
    orig_master_host    => $orig_master_host,
    orig_master_ip      => $orig_master_ip,
    orig_master_port    => $orig_master_port,
    new_master_host     => $new_master_host,
    new_master_ip       => $new_master_ip,
    new_master_port     => $new_master_port,
    new_master_user     => $new_master_user,
    new_master_password => $new_master_password,
  ";
}

&show_params();


exit &main();

sub main {
  ### TODO
  print "\n\n==== IN SCRIPT TEST ====  $ssh_stop_vip ---- $ssh_start_vip\n\n";

  if ( $command eq "stop" || $command eq "stopssh" ) {

    # $orig_master_host, $orig_master_ip, $orig_master_port are passed.
    # If you manage master ip address at global catalog database,
    # invalidate orig_master_ip here.
    my $exit_code = 1;
    eval {
      ### TODO
      print "Disabling the VIP on old master: $orig_master_host \n";
      &stop_vip();

      # updating global catalog, etc
      $exit_code = 0;
    };
    if ($@) {
      warn "Got Error: $@\n";
      exit $exit_code;
    }
    exit $exit_code;
  }
  elsif ( $command eq "start" ) {

    # all arguments are passed.
    # If you manage master ip address at global catalog database,
    # activate new_master_ip here.
    # You can also grant write access (create user, set read_only=0, etc) here.
    my $exit_code = 10;
    eval {
      my $new_master_handler = new MHA::DBHelper();

      # args: hostname, port, user, password, raise_error_or_not
      $new_master_handler->connect( $new_master_ip, $new_master_port,
        $new_master_user, $new_master_password, 1 );

      ## Set read_only=0 on the new master
      $new_master_handler->disable_log_bin_local();
      print "Set read_only=0 on the new master.\n";
      $new_master_handler->disable_read_only();

      ## Creating an app user on the new master
      print "Creating app user on the new master..\n";
      #FIXME_xxx_create_user( $new_master_handler->{dbh} );
      $new_master_handler->enable_log_bin_local();
      $new_master_handler->disconnect();

      ## Update master ip on the catalog database, etc
      ### TODO
      print "Enabling the VIP - $vip on the new master - $new_master_host \n";
      &start_vip();

      $exit_code = 0;
    };
    if ($@) {
      warn $@;

      # If you want to continue failover, exit 10.
      exit $exit_code;
    }
    exit $exit_code;
  }
  elsif ( $command eq "status" ) {
    ### TODO
    print "Checking the Status of the script.. \n";
    my $exit_code = &status_vip();
    if ($exit_code == 0) {
      print "\n\n OK\n\n";
    } else {
      print "\n\n $exit_code not OK\n";
    }

    exit $exit_code;
  }
  else {
    &usage();
    exit 1;
  }
}

sub usage {
  print
"Usage:
  master_ip_failover --command=start|stop|stopssh|status
                     --orig_master_host=host
                     --orig_master_ip=ip
                     --orig_master_port=port
                     --new_master_host=host
                     --new_master_ip=ip
                     --new_master_port=port
  ";
}

